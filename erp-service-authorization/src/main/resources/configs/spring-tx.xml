<?xml version="1.0" encoding="UTF-8"?>
<!--事务管理xml  -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.3.xsd
     http://www.springframework.org/schema/lang
     http://www.springframework.org/schema/lang/spring-lang-4.3.xsd ">
     
     
    <!-- AspectJ support -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- scan the package and the sub package -->
    <context:component-scan base-package="com.canaan.**"/>
    
     <bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="resultSetLogEnabled" value="true"/>
        <property name="statementExecutableSqlLogEnable" value="true"/>
    </bean>
    <!-- druid监控，统计过滤器 -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- sql合并 -->
        <property name="mergeSql" value="${durid.mergeSql}"/>
        <!-- 慢sql阀值，默认3000毫秒 -->
        <property name="slowSqlMillis" value="${durid.slowSqlMillis}"/>
        <!-- 慢sql记录，warn级 -->
        <property name="logSlowSql" value="${durid.logSlowSql}"/>
    </bean>
    <!-- 数据库连接回调 密码解密 -->
    <!-- <bean id="dBPasswordCallback"
          class="com.canaan.core.util.DBPasswordCallback"/> -->
    <!-- 数据源配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="connectionProperties" value="config.decrypt=false" />
        <!-- 使用自定义的密码加密回调 -->
        <!-- <property name="connectionProperties" value="pwd=${jdbc.password}"/> -->
        <!-- <property name="passwordCallback" ref="dBPasswordCallback"/> -->
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis"
                  value="${druid.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis"
                  value="${druid.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="/* ping */ SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <!-- 如果用Oracle, 则把poolPreparedStatements配置为true, mysql可以配置为false。 -->
        <property name="poolPreparedStatements" value=
                "${druid.poolPreparedStatements}"/>
        <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true -->
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
        <property name="maxOpenPreparedStatements"
                  value="${druid.maxOpenPreparedStatements}"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}"/>
        <!-- 监控过滤器，在applicationContext.xml中定义 -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
                <ref bean="log-filter"/>
            </list>
        </property>
        <!--五分钟记录一次执行sql-->
        <property name="timeBetweenLogStatsMillis" value="${durid.timeBetweenLogStatsMillis}"/>
        <!-- 配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。 在上面的配置中，如果连接超过30分钟未关闭，就会被强行回收，并且日志记录连接申请时的调用堆栈。 当removeAbandoned=true之后，可以在内置监控界面datasource.html中的查看ActiveConnection
          StackTrace属性的， 可以看到未关闭连接的具体堆栈信息，从而方便查出哪些连接泄漏了。 -->
        <!-- 打开removeAbandoned功能 -->
        <!-- <property name="removeAbandoned" value="true" /> -->
        <!-- 1800秒，也就是30分钟 -->
        <!-- <property name="removeAbandonedTimeout" value="1800" /> -->
        <!-- 关闭abanded连接时输出错误日志 -->
        <!-- <property name="logAbandoned" value="true" /> -->
    </bean>
   
   
   <!-- mybatis-pus 配置 -->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- mybatis config file -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- mybatis mapper file -->
		<property name="mapperLocations" value="classpath:com/canaan/product/mapper/xml/*Mapper.xml"></property>
		<!-- 配置实体扫描路径，多个package可以用分号; 逗号, 分隔， 支持通配符*-->
		<!-- com.a.b.entity;com.a.c.entity;com.d.*.entity-->
		<property name="typeAliasesPackage" value="com.canaan.product.entity"/>
		<!-- <property name="configuration" ref="mybatisConfig"/> -->
		<!-- MP 全局配置注入 -->
		<!-- <property name="globalConfig" ref="globalConfig"/> -->
		<property name="plugins">
		    <array>
		        <!-- 分页插件配置 -->
		       <bean id="paginationInterceptor"
		             class="com.baomidou.mybatisplus.plugins.PaginationInterceptor">
		             <property name="dialectType" value="mysql"></property>
		       </bean>
		       <!-- 乐观锁插件    
		       <bean id="optimisticLockerInterceptor"
		             class="com.baomidou.mybatisplus.plugins.OptimisticLockerInterceptor">
		       </bean>--> 
		       <!-- 性能拦截器，兼打印sql，不建议生产环境配置-->
		            <bean id="performanceInterceptor"
		                  class="com.baomidou.mybatisplus.plugins.PerformanceInterceptor"/>
		    </array>
	    </property>
    </bean>
    
    <!-- 配置mybatis 扫描mapper接口的路径, 相当于注解@MapperScan，@MapperScan("com.baomidou.mybatisplus.test.h2.entity.mapper")-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.canaan.product.mapper"/>
    </bean>

   <!--  <bean id="mybatisConfig" class="com.baomidou.mybatisplus.MybatisConfiguration">
	    <property name="mapUnderscoreToCamelCase" value="true"/>
	    部分数据库不识别默认的NULL类型（比如oracle，需要配置该属性
    </bean> -->

	<!-- 定义 MP 全局策略 -->
	<!-- <bean id="globalConfig" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
	    逻辑删除 定义下面3个参数
	    <property name="sqlInjector" ref="logicSqlInjector"/>
	    <property name="logicDeleteValue" value="-1"/>
	    <property name="logicNotDeleteValue" value="1"/>
	    全局ID类型： 0, "数据库ID自增"， 1, "用户输入ID", 2, "全局唯一ID", 3, "全局唯一ID"
	    <property name="idType" value="0"/>
	    2.1-gamma+ 数据库自动识别，无需配置数据库类型
	    <property name="dbType" value="mysql" />
	   
	    主键Sequence
	    <property name="keyGenerator" ref="keyGenerator"/>
	    公共字段填充处理器
	    <property name="metaObjectHandler" ref="myMetaObjectHandler"/>
	    数据库关键字转义符，'desc', "desc" 2.1-gamma+不需要制定
	    <property name="identifierQuote" value="'" />
    </bean> -->

	<!-- 配置oracle主键Sequence， 其他类型数据库，请配置相应的类型-->
	<!-- <bean id="keyGenerator" class="com.baomidou.mybatisplus.incrementer.OracleKeyGenerator"/> -->
	
	<!-- 自定义处理器 -->
	<!-- <bean id="myMetaObjectHandler" class="com.baomidou.test.MyMetaObjectHandler" /> -->
	<!-- 逻辑删除Sql注入器-->
	<!-- <bean id="logicSqlInjector" class="com.baomidou.mybatisplus.mapper.LogicSqlInjector"/> -->
	
   
	
	<!-- spring transaction -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    
	<!-- 支持 @Transactional 标记 -->
	<tx:annotation-driven />
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- <tx:method name="*condition" propagation="REQUIRED"  />
			<tx:method name="orderby*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" /> -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config proxy-target-class="false">
	   <!-- 事务AOP -->
       <aop:pointcut expression="execution(* com.canaan..service..*.*(..)) " id="jdkPointcut"/>
       <aop:advisor advice-ref="txAdvice" pointcut-ref="jdkPointcut"/>
	</aop:config>
	
	<aop:config proxy-target-class="false">
      <!-- 处理 @Cache AOP-->
      <aop:aspect ref="cacheInterceptor" order="1005">
        <aop:pointcut id="serviceCachePointcut" expression="execution(public !void com.canaan.*.service..*.*(..)) &amp;&amp; @annotation(cache) " />
        <aop:around pointcut-ref="serviceCachePointcut" method="proceed" />
      </aop:aspect>
      
    
      <!-- 处理 @CacheDelete AOP-->
      <aop:aspect ref="cacheInterceptor" order="1000"><!-- order 参数控制 aop通知的优先级，值越小，优先级越高 ，在事务提交后删除缓存 -->
        <aop:pointcut id="deleteCachePointcut" expression="execution(* com.canaan.*.service..*.*(..)) &amp;&amp; @annotation(cacheDelete)" />
        <aop:after-returning pointcut-ref="deleteCachePointcut" method="deleteCache" returning="retVal"/>
      </aop:aspect>
    
      <!-- 处理 @CacheDeleteTransactional AOP-->
      <aop:aspect ref="cacheInterceptor">
        <aop:pointcut id="cacheDeleteTransactional" expression="execution(* com.canaan.*.service..*.*(..)) &amp;&amp; @annotation(cacheDeleteTransactional)" />
        <aop:around pointcut-ref="cacheDeleteTransactional" method="deleteCacheTransactional" />
      </aop:aspect>
    
    </aop:config>
    
    <aop:config proxy-target-class="false">
    <!-- 拦截mybatis的mapper -->
	    <aop:aspect ref="cacheInterceptor">
	      <aop:pointcut id="daoCachePointcut1" expression="execution(public !void com.canaan.*.mapper..*.*(..))" />
	      <aop:around pointcut-ref="daoCachePointcut1" method="checkAndProceed" />
	    </aop:aspect>
	    <aop:aspect ref="cacheInterceptor" order="1000"><!-- order 参数控制 aop通知的优先级，值越小，优先级越高 ，在事务提交后删除缓存 -->
	      <aop:pointcut id="deleteCachePointcut1" expression="execution(* com.canaan.*.mapper..*.*(..))" />
	      <aop:after-returning pointcut-ref="deleteCachePointcut1" method="checkAndDeleteCache" returning="retVal" />
	    </aop:aspect>
    </aop:config>
</beans>